git commit:
    """Фиксация изменений индекса в снимок в репозиторий."""
    -a | --all = Сделать для всех не индексируемых файлов git add и только потом сам коммит.
    -m <msg> | message=<msg> = Быстрый заголовок для коммита.
    -am <msg> = Совмещённые команды -a -m
    --amend = Заменить последний коммит новым исправленным.
    -v = Добавляет в редактор строки о том, что было добавлено.

git diff:
    """Показывает разницу изменений для файлов находящихся НЕ В ИНДЕКСЕ."""
    --staged = Показываем разницу для файло которые В ИНДЕКСЕ.

git difftool = Открывает утилиту diff.tool для просмотра разницы между файлом ИЗ ИНДЕКСА и этим же файлом, НО МОДИФИЦИРОВАННЫМ.
git mergetool = Открывает утилиту merge.tool для просмотра и изменения слияния.

git rm <file>:
    """Позволяет удалять <file> и с диска и из индекса"""
    -f | --force = Принудительно УДАЛИТЬ <file> С ДИСКА и ИЗ ИНДЕКСА.
    --cached = Удалить файл из индекса, но оставить на диске.
    -r = Для рекурсивного удаления каталогов. 

git mv <old_filename> <new_filename>:
    """Позволяет правильно переименовать файл из <old_filename> в <new_filename>."""

git restore <file>:
    """Позволяет восстанавливать <file>. По умолчанию, если --staged задано, восстанавливается из HEAD, иначе из индекса."""
    --staged = Позволяет восстановить <file> из индекса, чтобы он соотвествовал версии из HEAD.

git switch <branch_name>:
    """Переключает на ветку <branch_name>."""
    -с | --create = Автоматические создает ветку с именем <branch_name> и переключается на неё.
    - = Переключится обратно на предыдущию ветку.

git checkout <branch_name>:
    """Переключает ветки, HEAD или восстанавливает файлы. Переключит HEAD на ветку, обновит индекс и файлы."""
    -b = Создаст новую ветку и переключит на неё.
    -f | --force = Переместит указатель <branch_name> на второй аргумент (указатель).

git branch <branch_name>:
    """Показывает, удаляет, создает ветки <branch_name>."""
    --list = Показывает список веток, также работает, если нет аргументов.
    -m | move <branch_name> <new_branchname> = Переименовывает ветки.
    -d | --delete = Удалить ветку, если она была объединена с upstream веткой.
    -D | --delete --force = Принудительно удаляет ветку.
    -v | -vv = Покажет подробноее описание ветки. Если -vv, выведет привязанные upstream ветки (git remote show <remote>).
    -r | --remotes = Показывает список веток слежения.
    --merged = Показывает ветки которые были слиты. (можно удалять)
    --no-merged = Показывает ветки которые не были слиты.

git tag:
    """Создает отметки (теги) на коммитах, которые содержать информацию."""
    -l | --list = Покажет список всех тегов в репозитории.
    <tagname> <hash> = Создаст тег на коммите с хешом <hash>.
    <tagname> = Создаст тег на текущем коммите.
    -a = Создаст Аннтотированный тег.
    -d = Удаляет тег.

git remote:
    """Позволяет работать с удалёнными репозиториями. Выводит имена удалённых репозиториев."""
    add <remote> <url> = Добавляет удалённый репозиторий как <remote>.
    rm <remote> = Удаляет удалённый репозиторий.
    rename <remote> <new_name_remote> = Переименовывает имя удалённого репозитория на <new_name_remote>.
    show <remote> = Просмотреть информацию об удалённом репозитории <remote>.
    get-url <remote> = Получить урл от <remote>.
    prune <remote> = Для удаление устаревших веток слежения.

git push:
    """"""
    <remote> <local_branch> = Отправляет локальную ветку <local_branch> в <remote>.
    <remote> --delete <local_branch> = Удалит удалённую ветку <local_branch> в <remote>.
    <remote> --all = Публикация всех локальных веток в <remote>.
    <remote> --tags = Публикация всех локальных тегов в <remote>.
    -u | --set-upstream = Привяжет ветку <branch> к <remote>/<branch>

git fetch:
    """Извлекает все нововедения из удалённого репозитория, но не сливает их с локальным репозиторием."""
    <remote> = Извлечь изменения из репозитория.
    <remote> <branch> = Извлечь изменения из определённой ветки.
    --all = Извлечёт все зарегистрированные репозитории и их ветки.

git pull:
    """Забирает все нововедения из удалённого репозитория, и сливает их с текущей веткой."""
    -u | --set-upstream = Привяжет ветку <branch> к <remote>/<branch>

git stash:
    """Позволяет спрятать изменения, в не зафиксированном состоянии."""
    list = Покажет все стеши и их индекса.
    apply = Позволит восстановить последний стеш в списке.
    apply stash@{ID} = Позволит восстановить стеш с индексом ID.
    drop stash@{ID} = Удалить стеш с индексом ID.
    pop = Позволит восстановить последний стеш из списка и тут же его удалит.
    branch <branch_name> = Создаст отдельную ветку с коммито, которые включает все припрятанные файлы из кадры стеша.
    --keep-index = Сохранит обычный кадр в стеш, но оставит все наработки в рабочей директории.
    --path = Откроет интерактивный режим, и спросит отдельно для каждого файла, что сохранять, а что нет.
    -u | --include-untracked = Позволит сохранить не только индекс и изменнёный файлы, но и не отслеживаемые.
    -a | --all = Сохранит вообще все файлы, даже которые в .gitignore


Удалить последний коммит (откатиться на один коммит назад):
    git reset --hard HEAD^

Переименовать файл:
    git mv <old_filename> <new_filename>

Удалить файл:
    git rm <file> = Удаляет файл И С ДИСКА И ИЗ ИНДЕКСА
    git rm -f | git rm --force <file> = Удаляет ПРИНУДИТЕЛЬНО файл И С ДИСКА И ИЗ ИНДЕКСА.
    git rm --cached <file> = Удаляет файл ИЗ ИНДЕКСА, но НЕ С ДИСКА.

Просмотреть разницу между ветками:
    git log <branch1>..<branch2>

Работа с локальными ветками:
    Cоздать ветку <branch_name>:
        git branch <branch_name>

    Переключится на <branch_name> | создать и переключаится на неё:
        git switch <branch_name>    | git switch -c <branch_name>
        git checkout <branch_name>  | git checkout -b <branch_name>

    Удалить ветку <branch_name>:
        git branch -d <branch_name> | git branch -D (-d -f) <branch_name>

    Переместить указатель ветки на другой коммит:
        git branch -f <branch_name> <point_commit>

    Для переименовывания веток:
        git branch -m <old_branchname> <new_branchname>


Для работы с удалёнными ветками:
    Для того чтобы обновить репозиторий:
        git fetch <remote>
        git switch <branch>
        git merge <remote>/<branch>

    Для того чтобы отправить локальную ветку:
        git push <remote> <local_branch>
        
    Для того чтобы удалить удалённую ветку в репозитории:
        git push <remote> --delete <branch_name>

    Для удаления ветки слежения:
        git branch -r <branchname>
        git remote prune <remote>

    Для просмотра коммитов между удалённой и текущей веткой:
        git log <cur_branch>..<remote>/<branch>


Для работы с удалёнными репозиториями:
    Просмотреть удалённые репозитории:
        git remote -v

    Добавить новые удалённый репозиторий:
        git remote add <remote> <url>

    Удалить удалённый репозиторий:
        git remote rm <remote>

    Переименовать удалённый репозиторий:
        git remote rename <old_remote> <new_remote>


Работа с тегами:
    Для создания тега | на определённом коммите:
        git tag <tagname>  |  git tag <tagname> <hash>

    Для удаления тега:
        git tag -d <tagname>

    Для просмотра тега:
        git show <tagname>

    Для перехода на тег:
        git checkout <tagname>

    Для отправки тега на удалённый репозиторий: 
        git push <remote> <tagname>
        git push <remote> --tags = Отправит ВСЕ теги
        git push <remote> --follow-tags = Отправит только АННТОТИРОВАННЫЕ теги

    Для удаление тегов с удалённого репозитория:
        git push <remote> --delete <tagname>

Изменить несколько коммитов:
    git rebase -i HEAD~n = где n кол-во коммитор на которые вы хотите откатиться и изменить их в случаи необходимости.
    git rebase --amend = Для изменения сообщения коммита
    git rebase --continue = Для перехода к след. коммитам.

